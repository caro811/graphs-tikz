% Graphs for tikz
% https://github.com/caro811/graphs-tikz

%--------------------------------------------------------------------------------------------------------------------------------------------------
% Identification

\NeedsTeXFormat{LaTeX2e}

\ProvidesPackage{graphs-tikz}[2023/03/07 graphs-tikz package]
%--------------------------------------------------------------------------------------------------------------------------------------------------

%--------------------------------------------------------------------------------------------------------------------------------------------------
% Required packages

\RequirePackage{pgfkeys}

\RequirePackage{xstring}

\RequirePackage{rotating}

\RequirePackage{tikz}
\usetikzlibrary{patterns}
%--------------------------------------------------------------------------------------------------------------------------------------------------

%--------------------------------------------------------------------------------------------------------------------------------------------------
% Options passed to the package

\DeclareOption*{\PackageWarning{graphs-tikz}{Unknown ‘\CurrentOption’}}

\ProcessOptions\relax
%--------------------------------------------------------------------------------------------------------------------------------------------------

%--------------------------------------------------------------------------------------------------------------------------------------------------
% Body

%----------------------------------
% Auxiliary
\pgfkeys{
	/vertex/.is family, /vertex,
	defaultVertex/.style = {
		size = small,
		color = black
	},
	size/.estore in = \vertexSize,
	color/.estore in = \vertexColor,
	.unknown/.code={
		\let\currname\pgfkeyscurrentname
		\let\currval\pgfkeyscurrentvalue
		\ifx#1\pgfkeysnovalue
			\pgfqkeys{/vertex}{remainingkeys/.append style/.expand once={\currname}}
		\else
			\pgfqkeys{/vertex}{remainingkeys/.append style/.expand twice={\expandafter\currname\expandafter=\currval}}
		\fi
	}
}

%----------------------------------
% Auxiliary
\pgfkeys{
	/edge/.is family, /edge,
	defaultEdge/.style = {
		curvedValue = no,
		out = 0,
		in = 0
	},
	curvedValue/.estore in = \edgeCurvedValue,
	out/.estore in = \edgeOut,
	in/.estore in = \edgeIn,
	curved/.code = {\def\edgeCurvedValue{yes}},
	.unknown/.code={
		\let\currname\pgfkeyscurrentname
		\let\currval\pgfkeyscurrentvalue
		\ifx#1\pgfkeysnovalue
			\pgfqkeys{/edge}{remainingkeys/.append style/.expand once={\currname}}
		\else
			\pgfqkeys{/edge}{remainingkeys/.append style/.expand twice={\expandafter\currname\expandafter=\currval}}
		\fi
	}
}

%---------------------------------------------------------------------------------------------------
% Vertices

%----------------------------------
% Vertex
% \vertex[optional arguments (color, size, etc.)]{x}{y}{name}
\newcommand{\vertex}[4][]{
	\pgfqkeys{/vertex}{remainingkeys/.style={}}
	\pgfkeys{/vertex, defaultVertex, #1}

	\IfEqCase{\vertexSize}{
		{small}{\def\vertexDiameter{0.16cm}}
		{medium}{\def\vertexDiameter{0.52cm}}
		{big}{\def\vertexDiameter{0.878cm}}%
	}[\def\vertexDiameter{\vertexSize}]

	\path (#2,#3) node[draw=\vertexColor, circle, minimum size=\vertexDiameter, /vertex/remainingkeys, inner sep=0pt, outer sep=0pt](#4){};
}

%----------------------------------
% Vertex label
% \vertexLabel[(optional) position]{name}{label}
% position: below, above, left, right, and combinations (below left, etc.)
\newcommand{\vertexLabel}[3][anchor=center]{
    \path (#2) node[#1]{#3};
}
%---------------------------------------------------------------------------------------------------

%---------------------------------------------------------------------------------------------------
% Edges

%----------------------------------
% Straight
% \edge[optional arguments (such as "color=red, dashed")]{nameVertex1}{nameVertex2}
\newcommand{\edge}[3][]{
	\pgfqkeys{/edge}{remainingkeys/.style={}}
	\pgfkeys{/edge, defaultEdge, #1}

	\IfEqCase{\edgeCurvedValue}{
		{yes}{\draw[/edge/remainingkeys] (#2) to[out=\edgeOut, in=\edgeIn] (#3);}
		{no}{\draw[/edge/remainingkeys] (#2) -- (#3);}%
	}[]
}

%----------------------------------
% Curved
% \edgeCurved[optional arguments (such as "color=red, dashed")]{nameVertex1}{nameVertex2}{angleOut}{angleIn}
\newcommand{\edgeCurved}[5][]{
	\draw[#1] (#2) to[out=#4, in=#5] (#3);
}

%----------------------------------
% Edge label
% \edgeLabel[(optional) position]{nameVertex1}{nameVertex2}{label}
\newcommand{\edgeLabel}[4][above]{
	\path (#2) -- (#3) node[midway, #1]{#4};
}
%---------------------------------------------------------------------------------------------------

%---------------------------------------------------------------------------------------------------
% Join
% \join[optional arguments (such as "color=red, dashed")]{name graph 1}{n1}{name graph 2}{n2}
\newcommand{\join}[5][]{
	\foreach \joinI in {1,...,#3} {
		\foreach \joinJ in {1,...,#5} {
			\edge[#1]{#2\joinI}{#4\joinJ};
		}
	}
}
%---------------------------------------------------------------------------------------------------

%---------------------------------------------------------------------------------------------------
% Vertex of a regular polygon
% \vertexRegularPolygon[optional arguments]{x of center}{y of center}{scale}{n}{position of vertex}{name}
\newcommand{\vertexRegularPolygon}[7][]{
	\vertex[#1]
	{ { (#2) + (#4) * -cos(deg(6.283*(#6 - 1)/(#5)-(1.571+3.142/(#5)))) } }
	{ { (#3) + (#4) * sin(deg(6.283*(#6 - 1)/(#5)-(1.571+3.142/(#5)))) } }
	{#7};
}
%---------------------------------------------------------------------------------------------------

%---------------------------------------------------------------------------------------------------
% Cycle
% \cycle[optional arguments]{x of center}{y of center}{scale}{n}{name}
\newcommand{\cycle}[6][]{
	\pgfkeys{/vertex, defaultVertex, #1}

	\foreach \cycleI in {1,...,#5} {
		\vertexRegularPolygon[#1]
						{#2}{#3}
						{#4}
						{#5}
						{\cycleI}
						{#6\cycleI}
						{};
	}

	\foreach \cycleI in {2,...,#5} {
		\pgfmathtruncatemacro{\cycleIminusOne}{\cycleI - 1};

		\edge[\vertexColor]{#6\cycleI}{#6\cycleIminusOne};
	}
	\pgfmathtruncatemacro{\cycleN}{#5};
	\pgfmathtruncatemacro{\cycleOne}{1};
	\edge[\vertexColor]{#6\cycleN}{#6\cycleOne};
}
%---------------------------------------------------------------------------------------------------

%---------------------------------------------------------------------------------------------------
% Anti-hole
% \antihole[optional arguments]{x of center}{y of center}{scale}{n}{name}
\newcommand{\antihole}[6][]{
	\pgfkeys{/vertex, defaultVertex, #1}

	\foreach \antiholeI in {1, ..., #5} {
		\vertexRegularPolygon[#1]
						{#2}{#3}
						{#4}
						{#5}
						{\antiholeI}
						{#6\antiholeI};
	}

	\pgfmathtruncatemacro{\antiholeN}{#5};
	\pgfmathtruncatemacro{\antiholeNminusOne}{\antiholeN - 1};
	\pgfmathtruncatemacro{\antiholeNminusTwo}{\antiholeN - 2};

	\foreach \antiholeI in {3, ..., \antiholeNminusOne} {
		\pgfmathtruncatemacro{\antiholeIminusTwo}{\antiholeI - 2};

		\foreach \antiholeJ in {1, ..., \antiholeIminusTwo} {
			\edge[\vertexColor]{#6\antiholeI}{#6\antiholeJ};
		}
	}

	\foreach \antiholeI in {2, ..., \antiholeNminusTwo} {
		\edge[\vertexColor]{#6\antiholeN}{#6\antiholeI};
	}
}
%---------------------------------------------------------------------------------------------------

%---------------------------------------------------------------------------------------------------
% Complete
% \complete[optional arguments]{x of center}{y of center}{scale}{n}{name}
\newcommand{\complete}[6][]{
	\pgfkeys{/vertex, defaultVertex, #1}

	\foreach \completeI in {1,...,#5} {
		\vertexRegularPolygon[#1]
						{#2}{#3}
						{#4}
						{#5}
						{\completeI}
						{#6\completeI}
						{};
	}

	\foreach \completeI in {2,...,#5} {
		\pgfmathtruncatemacro{\completeIminusOne}{\completeI - 1};

		\foreach \completeJ in {1,...,\completeIminusOne} {
			\edge[\vertexColor]{#6\completeI}{#6\completeJ};
		}
	}
}
%---------------------------------------------------------------------------------------------------

%---------------------------------------------------------------------------------------------------
% Spiders

%----------------------------------
% Thin spider
% \thinSpider[optional arguments]{x of center}{y of center}{scale}{n}{name}
\newcommand{\thinSpider}[6][]{
	\pgfkeys{/vertex, defaultVertex, #1}

	\foreach \thinSpiderI in {1,...,#5} {
		\vertexRegularPolygon[#1]
						{#2}{#3}
						{#4}
						{#5}
						{\thinSpiderI}
						{#6c\thinSpiderI}
						{};

		\vertexRegularPolygon[#1]
						{#2}{#3}
						{2*(#4)}
						{#5}
						{\thinSpiderI}
						{#6s\thinSpiderI}
						{};

		\edge[\vertexColor]{#6c\thinSpiderI}{#6s\thinSpiderI};
	}

	\foreach \thinSpiderI in {2,...,#5} {
		\pgfmathtruncatemacro{\thinSpiderIminusOne}{\thinSpiderI - 1};

		\foreach \thinSpiderJ in {1,...,\thinSpiderIminusOne} {
			\edge[\vertexColor]{#6c\thinSpiderI}{#6c\thinSpiderJ};
		}
	}
}

%----------------------------------
% Thick spider
% \thickSpider[optional arguments]{x of center}{y of center}{scale}{n}{name}
\newcommand{\thickSpider}[6][]{
	\pgfkeys{/vertex, defaultVertex, #1}

	\foreach \thickSpiderI in {1,...,#5} {
		\vertexRegularPolygon[#1]
						{#2}{#3}
						{#4}
						{#5}
						{\thickSpiderI}
						{#6c\thickSpiderI}
						{};

		\vertexRegularPolygon[#1]
						{#2}{#3}
						{2*(#4)}
						{#5}
						{\thickSpiderI}
						{#6s\thickSpiderI}
						{};
	}

	\foreach \thickSpiderI in {2,...,#5} {
		\pgfmathtruncatemacro{\thickSpiderIminusOne}{\thickSpiderI - 1};

		\foreach \thickSpiderJ in {1,...,\thickSpiderIminusOne} {
			\edge[\vertexColor]{#6c\thickSpiderI}{#6c\thickSpiderJ};
		}
	}

	\foreach \thickSpiderI in {1,...,#5} {
		\foreach \thickSpiderJ in {1,...,#5} {
			\ifthenelse
			{\equal{\thickSpiderI}{\thickSpiderJ}}
			{}
			{\edge[\vertexColor]{#6s\thickSpiderI}{#6c\thickSpiderJ};};
		}
	}
}
%---------------------------------------------------------------------------------------------------
%--------------------------------------------------------------------------------------------------------------------------------------------------
